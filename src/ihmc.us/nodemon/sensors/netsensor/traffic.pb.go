// Code generated by protoc-gen-go.
// source: traffic.proto
// DO NOT EDIT!

package netsensor

import proto "github.com/golang/protobuf/proto"
import fmt "fmt"
import math "math"
import _ "github.com/golang/protobuf/ptypes/timestamp"

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

type TrafficByInterface struct {
	MonitoringInterface string       `protobuf:"bytes,1,opt,name=monitoringInterface" json:"monitoringInterface,omitempty"`
	Microflows          []*Microflow `protobuf:"bytes,2,rep,name=microflows" json:"microflows,omitempty"`
}

func (m *TrafficByInterface) Reset()                    { *m = TrafficByInterface{} }
func (m *TrafficByInterface) String() string            { return proto.CompactTextString(m) }
func (*TrafficByInterface) ProtoMessage()               {}
func (*TrafficByInterface) Descriptor() ([]byte, []int) { return fileDescriptor6, []int{0} }

func (m *TrafficByInterface) GetMonitoringInterface() string {
	if m != nil {
		return m.MonitoringInterface
	}
	return ""
}

func (m *TrafficByInterface) GetMicroflows() []*Microflow {
	if m != nil {
		return m.Microflows
	}
	return nil
}

type Microflow struct {
	IpSrc   uint32  `protobuf:"varint,1,opt,name=ipSrc" json:"ipSrc,omitempty"`
	IpDst   uint32  `protobuf:"varint,2,opt,name=ipDst" json:"ipDst,omitempty"`
	Stats   []*Stat `protobuf:"bytes,3,rep,name=stats" json:"stats,omitempty"`
	Latency uint32  `protobuf:"varint,4,opt,name=latency" json:"latency,omitempty"`
}

func (m *Microflow) Reset()                    { *m = Microflow{} }
func (m *Microflow) String() string            { return proto.CompactTextString(m) }
func (*Microflow) ProtoMessage()               {}
func (*Microflow) Descriptor() ([]byte, []int) { return fileDescriptor6, []int{1} }

func (m *Microflow) GetIpSrc() uint32 {
	if m != nil {
		return m.IpSrc
	}
	return 0
}

func (m *Microflow) GetIpDst() uint32 {
	if m != nil {
		return m.IpDst
	}
	return 0
}

func (m *Microflow) GetStats() []*Stat {
	if m != nil {
		return m.Stats
	}
	return nil
}

func (m *Microflow) GetLatency() uint32 {
	if m != nil {
		return m.Latency
	}
	return 0
}

type Stat struct {
	StatType StatType   `protobuf:"varint,1,opt,name=statType,enum=netsensor.StatType" json:"statType,omitempty"`
	Protocol string     `protobuf:"bytes,2,opt,name=protocol" json:"protocol,omitempty"`
	SrcPort  uint32     `protobuf:"varint,3,opt,name=srcPort" json:"srcPort,omitempty"`
	DstPort  uint32     `protobuf:"varint,4,opt,name=dstPort" json:"dstPort,omitempty"`
	Averages []*Average `protobuf:"bytes,5,rep,name=averages" json:"averages,omitempty"`
}

func (m *Stat) Reset()                    { *m = Stat{} }
func (m *Stat) String() string            { return proto.CompactTextString(m) }
func (*Stat) ProtoMessage()               {}
func (*Stat) Descriptor() ([]byte, []int) { return fileDescriptor6, []int{2} }

func (m *Stat) GetStatType() StatType {
	if m != nil {
		return m.StatType
	}
	return StatType_TRAFFIC_AVERAGE
}

func (m *Stat) GetProtocol() string {
	if m != nil {
		return m.Protocol
	}
	return ""
}

func (m *Stat) GetSrcPort() uint32 {
	if m != nil {
		return m.SrcPort
	}
	return 0
}

func (m *Stat) GetDstPort() uint32 {
	if m != nil {
		return m.DstPort
	}
	return 0
}

func (m *Stat) GetAverages() []*Average {
	if m != nil {
		return m.Averages
	}
	return nil
}

type Average struct {
	Resolution uint32 `protobuf:"varint,1,opt,name=resolution" json:"resolution,omitempty"`
	Prefix     Prefix `protobuf:"varint,2,opt,name=prefix,enum=netsensor.Prefix" json:"prefix,omitempty"`
	Sent       uint32 `protobuf:"varint,3,opt,name=sent" json:"sent,omitempty"`
	Received   uint32 `protobuf:"varint,4,opt,name=received" json:"received,omitempty"`
	Observed   uint32 `protobuf:"varint,5,opt,name=observed" json:"observed,omitempty"`
}

func (m *Average) Reset()                    { *m = Average{} }
func (m *Average) String() string            { return proto.CompactTextString(m) }
func (*Average) ProtoMessage()               {}
func (*Average) Descriptor() ([]byte, []int) { return fileDescriptor6, []int{3} }

func (m *Average) GetResolution() uint32 {
	if m != nil {
		return m.Resolution
	}
	return 0
}

func (m *Average) GetPrefix() Prefix {
	if m != nil {
		return m.Prefix
	}
	return Prefix_NONE
}

func (m *Average) GetSent() uint32 {
	if m != nil {
		return m.Sent
	}
	return 0
}

func (m *Average) GetReceived() uint32 {
	if m != nil {
		return m.Received
	}
	return 0
}

func (m *Average) GetObserved() uint32 {
	if m != nil {
		return m.Observed
	}
	return 0
}

func init() {
	proto.RegisterType((*TrafficByInterface)(nil), "netsensor.TrafficByInterface")
	proto.RegisterType((*Microflow)(nil), "netsensor.Microflow")
	proto.RegisterType((*Stat)(nil), "netsensor.Stat")
	proto.RegisterType((*Average)(nil), "netsensor.Average")
}

func init() { proto.RegisterFile("traffic.proto", fileDescriptor6) }

var fileDescriptor6 = []byte{
	// 425 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x09, 0x6e, 0x88, 0x02, 0xff, 0x6c, 0x92, 0x4d, 0x6e, 0xdb, 0x30,
	0x10, 0x85, 0xa1, 0xd8, 0x4e, 0xec, 0x69, 0xe2, 0xa2, 0x4c, 0x16, 0x82, 0x17, 0x6d, 0x6a, 0xa0,
	0x40, 0xba, 0x91, 0x0b, 0xb7, 0x17, 0x88, 0x91, 0x4d, 0x17, 0x05, 0x0c, 0x26, 0xab, 0xee, 0x68,
	0x7a, 0xe4, 0x12, 0x90, 0x48, 0x81, 0x1c, 0xa7, 0x11, 0xd0, 0xc3, 0xe4, 0x16, 0xbd, 0x5e, 0xc1,
	0x1f, 0x29, 0x42, 0x91, 0x9d, 0xde, 0x7c, 0x4f, 0x7c, 0x8f, 0x03, 0xc2, 0x05, 0x59, 0x51, 0x96,
	0x4a, 0x16, 0x8d, 0x35, 0x64, 0xd8, 0x4c, 0x23, 0x39, 0xd4, 0xce, 0xd8, 0xc5, 0x79, 0x63, 0xb1,
	0x54, 0x4f, 0x11, 0x2c, 0xe6, 0x7b, 0x41, 0x82, 0xda, 0x06, 0x93, 0xfe, 0x70, 0x30, 0xe6, 0x50,
	0xe1, 0x2a, 0xa8, 0xdd, 0xb1, 0x5c, 0x91, 0xaa, 0xd1, 0x91, 0xa8, 0x9b, 0x68, 0x58, 0xfe, 0x01,
	0xf6, 0x10, 0x8f, 0xde, 0xb4, 0xdf, 0x35, 0xa1, 0x2d, 0x85, 0x44, 0xf6, 0x05, 0x2e, 0x6b, 0xa3,
	0x15, 0x19, 0xab, 0xf4, 0xa1, 0x1f, 0xe7, 0xd9, 0x75, 0x76, 0x33, 0xe3, 0xaf, 0x21, 0xf6, 0x0d,
	0xa0, 0x56, 0xd2, 0x9a, 0xb2, 0x32, 0xbf, 0x5d, 0x7e, 0x72, 0x3d, 0xba, 0x79, 0xb3, 0xbe, 0x2a,
	0xfa, 0x9a, 0xc5, 0x8f, 0x0e, 0xf2, 0x81, 0x6f, 0xf9, 0x04, 0xb3, 0x1e, 0xb0, 0x2b, 0x98, 0xa8,
	0xe6, 0xde, 0xca, 0x10, 0x73, 0xc1, 0xa3, 0x88, 0xd3, 0x3b, 0x47, 0xf9, 0x49, 0x37, 0xbd, 0x73,
	0xc4, 0x3e, 0xc1, 0xc4, 0x91, 0x20, 0x97, 0x8f, 0x42, 0xd2, 0xdb, 0x41, 0xd2, 0x3d, 0x09, 0xe2,
	0x91, 0xb2, 0x1c, 0xce, 0x2a, 0x41, 0xa8, 0x65, 0x9b, 0x8f, 0xc3, 0xef, 0x9d, 0x5c, 0xfe, 0xcd,
	0x60, 0xec, 0x9d, 0x6c, 0x05, 0x53, 0xef, 0x7d, 0x68, 0x9b, 0x78, 0xbf, 0xf9, 0xfa, 0xf2, 0xbf,
	0xc3, 0x3c, 0xe2, 0xbd, 0x89, 0x2d, 0x60, 0x1a, 0x56, 0x27, 0x4d, 0x15, 0x3a, 0xcd, 0x78, 0xaf,
	0x7d, 0x9e, 0xb3, 0x72, 0x6b, 0x2c, 0xe5, 0xa3, 0x98, 0x97, 0xa4, 0x27, 0x7b, 0x47, 0x81, 0xa4,
	0x26, 0x49, 0xb2, 0x02, 0xa6, 0xe2, 0x11, 0xad, 0x38, 0xa0, 0xcb, 0x27, 0xe1, 0x36, 0x6c, 0x50,
	0xe0, 0x36, 0x22, 0xde, 0x7b, 0x96, 0xcf, 0x19, 0x9c, 0xa5, 0x29, 0x7b, 0x0f, 0x60, 0xd1, 0x99,
	0xea, 0x48, 0xca, 0xe8, 0xb4, 0xb7, 0xc1, 0x84, 0x7d, 0x86, 0xd3, 0xf8, 0x3c, 0x42, 0xd3, 0xf9,
	0xfa, 0xdd, 0xe0, 0xe4, 0x6d, 0x00, 0x3c, 0x19, 0x18, 0x83, 0xb1, 0x43, 0xdd, 0xf5, 0x0e, 0xdf,
	0xfe, 0xaa, 0x16, 0x25, 0xaa, 0x47, 0xdc, 0xa7, 0xd6, 0xbd, 0xf6, 0xcc, 0xec, 0x1c, 0x5a, 0xcf,
	0x26, 0x91, 0x75, 0x7a, 0x73, 0x0b, 0x1f, 0x8f, 0xae, 0x50, 0xbf, 0x6a, 0x59, 0x68, 0xb3, 0xc7,
	0xda, 0xe8, 0x22, 0x86, 0xba, 0x97, 0xfc, 0xcd, 0x79, 0x7a, 0x77, 0x5b, 0xbf, 0xbc, 0x6d, 0xf6,
	0xf3, 0xe5, 0x4d, 0x3f, 0x67, 0xd9, 0xee, 0x34, 0xec, 0xf4, 0xeb, 0xbf, 0x00, 0x00, 0x00, 0xff,
	0xff, 0x35, 0xe6, 0xd3, 0x28, 0xf9, 0x02, 0x00, 0x00,
}
