// Code generated by protoc-gen-go.
// source: subject.proto
// DO NOT EDIT!

package measure

import proto "github.com/golang/protobuf/proto"
import fmt "fmt"
import math "math"

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

type Subject int32

const (
	Subject_host              Subject = 0
	Subject_network           Subject = 1
	Subject_traffic           Subject = 2
	Subject_cpu               Subject = 3
	Subject_memory            Subject = 4
	Subject_os                Subject = 5
	Subject_network_health    Subject = 6
	Subject_disservice        Subject = 7
	Subject_mockets           Subject = 8
	Subject_link_description  Subject = 9
	Subject_netviewer_request Subject = 10
	Subject_geolocation       Subject = 11
	Subject_battery           Subject = 12
)

var Subject_name = map[int32]string{
	0:  "host",
	1:  "network",
	2:  "traffic",
	3:  "cpu",
	4:  "memory",
	5:  "os",
	6:  "network_health",
	7:  "disservice",
	8:  "mockets",
	9:  "link_description",
	10: "netviewer_request",
	11: "geolocation",
	12: "battery",
}
var Subject_value = map[string]int32{
	"host":              0,
	"network":           1,
	"traffic":           2,
	"cpu":               3,
	"memory":            4,
	"os":                5,
	"network_health":    6,
	"disservice":        7,
	"mockets":           8,
	"link_description":  9,
	"netviewer_request": 10,
	"geolocation":       11,
	"battery":           12,
}

func (x Subject) String() string {
	return proto.EnumName(Subject_name, int32(x))
}
func (Subject) EnumDescriptor() ([]byte, []int) { return fileDescriptor1, []int{0} }

func init() {
	proto.RegisterEnum("measure.Subject", Subject_name, Subject_value)
}

func init() { proto.RegisterFile("subject.proto", fileDescriptor1) }

var fileDescriptor1 = []byte{
	// 248 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x09, 0x6e, 0x88, 0x02, 0xff, 0x34, 0x90, 0xb1, 0x4e, 0xc3, 0x40,
	0x0c, 0x40, 0x49, 0x5b, 0x92, 0xe2, 0x96, 0x62, 0x2c, 0xd8, 0xf8, 0x02, 0x86, 0x2c, 0x6c, 0x8c,
	0xfd, 0x82, 0x4a, 0x6c, 0x2c, 0xd5, 0xe5, 0xe2, 0x92, 0x23, 0xb9, 0x73, 0xb8, 0x73, 0x5a, 0xf5,
	0x6f, 0xf8, 0x1a, 0xbe, 0x0b, 0xa5, 0x84, 0xd1, 0xb2, 0xfd, 0xa4, 0xf7, 0xe0, 0x36, 0x0d, 0xd5,
	0x27, 0x5b, 0x2d, 0xfb, 0x28, 0x2a, 0x54, 0x78, 0x36, 0x69, 0x88, 0xfc, 0xfc, 0x93, 0x41, 0xf1,
	0xf6, 0xb7, 0xa2, 0x25, 0x2c, 0x1a, 0x49, 0x8a, 0x57, 0xb4, 0x82, 0x22, 0xb0, 0x9e, 0x24, 0xb6,
	0x98, 0x8d, 0x83, 0x46, 0x73, 0x38, 0x38, 0x8b, 0x33, 0x2a, 0x60, 0x6e, 0xfb, 0x01, 0xe7, 0x04,
	0x90, 0x7b, 0xf6, 0x12, 0xcf, 0xb8, 0xa0, 0x1c, 0x66, 0x92, 0xf0, 0x9a, 0x08, 0x36, 0xd3, 0xdb,
	0xbe, 0x61, 0xd3, 0x69, 0x83, 0x39, 0x6d, 0x00, 0x6a, 0x97, 0x12, 0xc7, 0xa3, 0xb3, 0x8c, 0xc5,
	0x48, 0xf3, 0x62, 0x5b, 0xd6, 0x84, 0x4b, 0x7a, 0x00, 0xec, 0x5c, 0x68, 0xf7, 0x35, 0x27, 0x1b,
	0x5d, 0xaf, 0x4e, 0x02, 0xde, 0xd0, 0x23, 0xdc, 0x07, 0xd6, 0xa3, 0xe3, 0x13, 0xc7, 0x7d, 0xe4,
	0xaf, 0x81, 0x93, 0x22, 0xd0, 0x1d, 0xac, 0x3e, 0x58, 0x3a, 0xb1, 0xe6, 0x72, 0xb7, 0x1a, 0x51,
	0x95, 0x51, 0xe5, 0x78, 0xc6, 0xf5, 0xf6, 0x15, 0x9e, 0x86, 0x54, 0xba, 0xc6, 0xdb, 0xb2, 0xae,
	0x8d, 0x2f, 0x83, 0xd4, 0xec, 0x25, 0x94, 0x93, 0xe8, 0x76, 0x3d, 0x59, 0xee, 0x46, 0xff, 0x5d,
	0xf6, 0xfe, 0x5f, 0xe0, 0x3b, 0xcb, 0xaa, 0xfc, 0x12, 0xe5, 0xe5, 0x37, 0x00, 0x00, 0xff, 0xff,
	0xec, 0xce, 0x87, 0xc1, 0x25, 0x01, 0x00, 0x00,
}
